---
title: "Overview: Model data"
format: 
  html:
    theme:
      light: yeti
      dark: superhero
    fontsize: small
    grid:
      sidebar-width: 15em
    code-fold: true
    toc: true
    toc-location: left
    toc-title: Contents
    toc-depth: 3
    toc-expand: true
    embed-resources: true
    html-math-method: katex
editor: source
---

# Setup

## Libraries

```{r}
# Libraries
library(here)
library(data.table)
library(parallel)
library(magrittr)
library(ggplot2)
library(ggh4x)
library(viridis)
```

## Source functions

```{r}
base_path = file.path(here::here(),
                      'code',
                      fsep = .Platform$file.sep)
source(file.path(base_path, 'utils', 'Neurocodify_plot.R',
                 fsep = .Platform$file.sep))
source(file.path(base_path, 'model_fitting', 'LRfunction.R',
                 fsep = .Platform$file.sep))
```

## Load data

```{r}
# Glob files based on naming pattern
load_path = file.path(here::here(),
                      'derivatives',
                      'model_fitting',
                      fsep = .Platform$file.sep)
files = Sys.glob(file.path(load_path,
                           'modeldata-*.tsv',
                           fsep = .Platform$file.sep))

# Function to load text files (.tsv)
Load_tsv = function(file_path){
  tsv = data.table::fread(file_path,
                          sep = '\t',
                          na.strings = 'n/a')
  return(tsv)
}

# Get list of all text files using parallel processing
data_list = parallel::mclapply(X = files,
                               FUN = Load_tsv,
                               mc.cores = 4)
# Bind individual list entries (loaded text files) to single data frame
# (using optimized bind function by data.table package)
data = data.table::rbindlist(data_list)

# Focus on random starting values
data = data[starting_values == 'random',]
```

## PEs in every bandit over time

```{r}
data_plot = data %>%
  .[,updated_bandit := factor(updated_bandit)] %>%
  .[model == 'surprise',]

p = ggplot(data = data_plot[!is.na(updated_bandit),],
           aes(x = trial,
               y = abs(pe),
               color = updated_bandit)) +
  geom_point(size = 0.5,
             alpha = 0.3) +
  facet_grid(. ~ updated_bandit) +
  theme(legend.position = 'none')
Neurocodify_plot(p)
```


