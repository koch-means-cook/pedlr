---
title: "Analysis: Model Recovery"
format: 
  html:
    theme:
      light: yeti
      dark: superhero
    fontsize: small
    grid:
      sidebar-width: 15em
    code-fold: true
    toc: true
    toc-location: left
    toc-title: Contents
    toc-depth: 3
    toc-expand: true
    embed-resources: true
    html-math-method: katex
editor: source
---

# Setup

## Libraries

```{r}
# Libraries
library(here)
library(data.table)
library(parallel)
library(magrittr)
library(ggplot2)
library(ggh4x)
library(viridis)
```

## Source functions

```{r}
base_path = file.path(here::here(),
                      'code',
                      fsep = .Platform$file.sep)
source(file.path(base_path, 'utils', 'Neurocodify_plot.R',
                 fsep = .Platform$file.sep))
source(file.path(base_path, 'model_fitting', 'LRfunction.R',
                 fsep = .Platform$file.sep))
source(file.path(base_path, 'utils', 'Prepare_data_for_plot.R',
                 fsep = .Platform$file.sep))
```


# Model recovery (Principled Betas)

## Load data

```{r}
# Glob files based on naming pattern
load_path = file.path(here::here(),
                      'derivatives',
                      'parameter_recovery',
                      fsep = .Platform$file.sep)
# Load data with fixed betas during simulation
files = Sys.glob(file.path(load_path,
                           'modelrecov_base-*_randips-TRUE_randbetas-FALSE_randsvs-TRUE_principle-TRUE.tsv',
                           fsep = .Platform$file.sep))

# Function to load text files (.tsv)
Load_tsv = function(file_path){
  tsv = data.table::fread(file_path,
                          sep = '\t',
                          na.strings = 'n/a')
  return(tsv)
}

# Get list of all text files using parallel processing
data_list = parallel::mclapply(X = files,
                               FUN = Load_tsv,
                               mc.cores = 4)
# Bind individual list entries (loaded text files) to single data frame
# (using optimized bind function by data.table package)
data = data.table::rbindlist(data_list) %>%
  # Rename to avoid 'x' as column name
  data.table::setnames(., old = 'x', new = 'params')
```

## Recovery

```{r}
data_recovery = data %>%
  # For each model that generated data, get AICc for all fitted models
  .[, .(AICc = unique(AICc)),
    by = c('participant_id',
           'generating_model',
           'iter',
           'model',
           'generating_x1',
           'generating_x2',
           'generating_x3',
           'generating_x4',
           'generating_x5',
           'generating_x6')] %>%
  # Get winning model of recovery (lowest AICc)
  .[, recovered_model := model[which(AICc == min(AICc))],
    by = c('participant_id',
           'generating_model',
           'iter')] %>%
  # Get match between generating/recovered model
  .[, correct_recovery := generating_model == recovered_model] %>%
  # Factorize variables and sort factor levels in matching manner
  .[, c('generating_model', 'recovered_model') := lapply(.SD, factor),
    .SDcols = c('generating_model', 'recovered_model')] %>%
  .[, recovered_model := factor(recovered_model, levels = levels(generating_model))]
```

## Histogram matrix

```{r}
# Plot recovery as histogram
data_plot = data_recovery %>%
  # Detailed model names for plot
  Prepare_data_for_plot(.) %>%
  # Reduce to row for each attempted recovery
  .[, .(recovered_model = unique(recovered_model)),
    by = c('participant_id', 'generating_model', 'iter')] %>%
  # Get matching model for each generative model to mark it in plot
  .[, correct_model := as.character(recovered_model) == as.character(generating_model)]
p = ggplot(data = data_plot,
           aes(x = recovered_model,
               color = correct_model)) +
  scale_color_manual(values = c('transparent', 'black')) +
  geom_bar(fill = 'lightgrey') +
  labs(x = 'Recovered Model',
       title = 'Model recovery: Recovered models for each generating model') + 
  facet_grid(generating_model ~ .,
             switch = 'y')
Neurocodify_plot(p) +
  theme(panel.grid.major.x = element_blank(),
        panel.grid.minor.x = element_blank(),
        axis.text.x = element_text(angle = 25,
                                   hjust = 1,
                                   vjust = 1),
        axis.title.y = element_blank(),
        plot.title = element_text(face = 'bold',
                                  hjust = 0.5),
        strip.placement = 'outside',
        strip.text.y.left = element_text(size = 10,
                                  face = 'bold',
                                  angle = 0,
                                  hjust = 1),
        legend.position = 'none',
        aspect.ratio = 1/6)
```

## Confusion matrix

Supplement Manuscript ll. 30-45

```{r}
# Plot recovery as CM
data_plot = data_recovery %>%
  # Detailed model names for plot
  Prepare_data_for_plot(.) %>%
  # Reduce to row for each attempted recovery
  .[, .(recovered_model = unique(recovered_model)),
    by = c('participant_id', 'generating_model', 'iter')] %>%
    # count recoveries (including 0s)
  .[, .(recovered_model = levels(recovered_model),
        count = c(table(recovered_model))),
    by = c('generating_model')] %>%
  data.table::setorder('generating_model') %>%
  .[, perc := count/sum(count),
    by = 'generating_model'] %>%
  .[, sum_perc := sum(perc),
    by = 'generating_model'] %>%
  .[, label_short := substr(format(round(perc, 2), nsmall = 2), 2,4)] %>%
  .[, is_low := perc < 0.4] %>%
  # Align factor level sorting
  .[, recovered_model := factor(recovered_model,
                                levels = levels(generating_model))]

p = ggplot(data = data_plot,
           aes(x = recovered_model,
               y = generating_model,
               fill = perc,
               color = is_low,
               label = label_short)) +
  geom_tile(color = 'black') +
  geom_text() +
  labs(x = 'Fit model',
       y = 'Simulated model') +
  theme(panel.background = element_rect(fill = NA,
                                        color = NA),
        panel.grid = element_blank(),
        legend.position = 'none',
        axis.title = element_text(size = 12, face = 'bold'),
        axis.ticks = element_blank(),
        strip.text = element_blank(),
        strip.background = element_blank(),
        plot.title = element_text(hjust = 0.5,
                                  vjust = 0),
        #axis.text = element_text(size = 12),
        plot.margin = margin(0,0,0,0,'pt')) +
  scale_y_discrete(limits = rev) +
  scale_color_manual(values = c('black', 'white')) +
  scale_fill_gradient(low = 'black', high = 'white')
p
```

